package com.learning.app.ws.service.impl;

import java.util.ArrayList;

import javax.validation.constraints.Email;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.learning.app.ws.io.entity.UserEntity;
import com.learning.app.ws.io.repository.UserRepository;
import com.learning.app.ws.service.UserService;
import com.learning.app.ws.ui.shared.Utils;
import com.learning.app.ws.ui.shared.dto.UserDto;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	UserRepository userRepository;
	
	@Autowired
	Utils utils;
	
	@Autowired
	BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@Override
	public UserDto createUser(UserDto userDto) {
		
		if(userRepository.findByEmail(userDto.getEmail())!=null) throw new RuntimeException("Record Already Exist");
		
		UserEntity entity = new UserEntity();		
		BeanUtils.copyProperties(userDto, entity);
		
		entity.setUserId(utils.generateUserId(30));		
		entity.setEncryptedPassword(bCryptPasswordEncoder.encode(userDto.getPassword()));
		
		
		UserEntity userEntity = userRepository.save(entity);
	  
		UserDto returnValue = new UserDto();
		BeanUtils.copyProperties(userEntity, returnValue);
		
		return returnValue;
	}

	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		// TODO Auto-generated method stub
		UserEntity entity = userRepository.findByEmail(username);
		if(entity==null) throw new UsernameNotFoundException(username);
		return new User(entity.getEmail(),entity.getEncryptedPassword(),new ArrayList<>());
	}


	@Override
	public UserDto getUser(String email) {
		UserEntity entity = userRepository.findByEmail(email);
		
		if(entity==null) throw new UsernameNotFoundException(email);
		
		UserDto returnValue = new UserDto();
		BeanUtils.copyProperties(entity, returnValue);
		return returnValue;
	}


	@Override
	public UserDto getUserByUserId(String userId) {
		UserEntity entity = userRepository.findByUserId(userId);

		if(entity==null) throw new UsernameNotFoundException(userId);

		UserDto returnValue = new UserDto();

		BeanUtils.copyProperties(entity, returnValue);

		// TODO Auto-generated method stub
		return returnValue;
	}


	@Override
	public UserDto updateUser(String id,UserDto userDto) {
		// TODO Auto-generated method stub
		return null;
	}


 
}
